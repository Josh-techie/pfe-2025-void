<?php

/**
 * @file
 * Contains responsive_favicons.module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\UrlHelper;

/**
 * Implements hook_help().
 */
function responsive_favicons_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the responsive_favicons module.
    case 'help.page.responsive_favicons':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module adds the favicons generated by http://realfavicongenerator.net/ to your site. The responsive name comes from the fact that many devices are catered for including iPhone, Android, iPad, other tablets and desktops.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Hook_page_attachments doesn't run for maintenance-page.
 */
function responsive_favicons_preprocess_maintenance_page(array &$variables) {
  responsive_favicons_page_attachments($variables);
}

/**
 * Implements hook_page_attachments().
 *
 * Adds responsive favicons to HTML head. A trailing newline is added to ensure
 * the next tag in the HTML head section starts on the next line.
 */
function responsive_favicons_page_attachments(array &$page) {
  $tags = responsive_favicons_load_all_icons();
  if (!empty($tags['links'])) {
    foreach ($tags['links'] as $link_attributes) {
      $page['#attached']['html_head_link'][] = [
        $link_attributes,
        TRUE,
      ];
    }
  }
  if (!empty($tags['metatags'])) {
    foreach ($tags['metatags'] as $index => $meta_attributes) {
      $meta = [
        '#tag' => 'meta',
        '#attributes' => $meta_attributes,
      ];
      $page['#attached']['html_head'][] = [$meta, 'responsive_favicons:' . $index];
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 *
 * Remove the stock Drupal favicon if it is present.
 */
function responsive_favicons_page_attachments_alter(array &$attachments) {
  $config = \Drupal::config('responsive_favicons.settings');
  if ($config->get('remove_default') && isset($attachments['#attached']['html_head_link'])) {
    foreach ($attachments['#attached']['html_head_link'] as $key => $link) {
      if (isset($link[0]['href']) && preg_match('#/(core|themes)/.*/favicon\.ico$#', $link[0]['href'])) {
        unset($attachments['#attached']['html_head_link'][$key]);
      }
    }
  }
}

/**
 * Load the responsive favicons that are valid.
 */
function responsive_favicons_load_all_icons() {
  $icon_tags = &drupal_static(__FUNCTION__);
  if (!isset($icon_tags)) {
    $config = \Drupal::config('responsive_favicons.settings');
    $cid = _responsive_favicons_get_cache_id($config);
    if ($cached = \Drupal::cache()->get($cid)) {
      $icon_tags = $cached->data;
    }
    else {
      $tags = $config->get('tags');
      if (empty($tags)) {
        $icon_tags = [
          'links' => [],
          'metatags' => [],
          'missing' => [],
        ];
      }
      else {
        $html = implode(PHP_EOL, $tags);
        $icon_tags = _responsive_favicons_validate_tags($html, $config);
        // Allow other modules to alter the loaded $icon_tags.
        \Drupal::moduleHandler()->alter('responsive_favicons_tags', $icon_tags);
        $cache_tags = $config->getCacheTags();
        \Drupal::cache()->set($cid, $icon_tags, Cache::PERMANENT, $cache_tags);
      }
    }
  }

  return $icon_tags;
}

/**
 * Gets the icons' cache identifier.
 *
 * @return string
 *   The icons' cache identifier.
 */
function _responsive_favicons_get_cache_id($config) {
  $type = $config->get('path_type');
  $path = $config->get('path');
  return "responsive_favicons:$type:$path:icons";
}

/**
 * Validate the contributed links and meta tags.
 *
 * Helper function to check whether responsive favicon files exist and are
 * readable. This function also strips any pasted content that is not a link
 * or a meta tag.
 *
 * @param string $html
 *   The HTML tag.
 * @param mixed|null $config
 *   The module configuration.
 *
 * @return array
 *   The attributes of found and missing links and meta-tags.
 */
function _responsive_favicons_validate_tags($html, $config = NULL) {
  global $base_path;

  // Use default config if not provided as parameter.
  if (is_null($config)) {
    $config = \Drupal::config('responsive_favicons.settings');
  }

  $links = [];
  $metatags = [];
  $missing = [];

  $dom = new DOMDocument();
  $dom->loadHTML($html);

  // DRUPAL_ROOT contains the sub directory of the Drupal install (if present),
  // in our case we do not want this as $file_path already contains this.
  $docroot = preg_replace('/' . preg_quote($base_path, '/') . '$/', '/', DRUPAL_ROOT);

  // Find all the apple touch icons.
  $dom_links = $dom->getElementsByTagName('link');

  // Loop through link tags and store their attributes in an associative array.
  _responsive_favicons_process_dom_links(
    $dom, $dom_links, $links, $missing, $docroot, $config);

  // Find any Windows 8 meta tags.
  $dom_metatags = $dom->getElementsByTagName('meta');

  // Loop through meta-tags and store their attributes in an associative array.
  _responsive_favicons_process_dom_metatags(
    $dom, $dom_metatags, $metatags, $missing, $docroot, $config);

  return [
    'links' => $links,
    'metatags' => $metatags,
    'missing' => $missing,
  ];
}

/**
 * Process favicon DOM links.
 *
 * @param DOMDocument $dom
 *   The DOM document.
 * @param DOMNodeList $dom_links
 *   The DOM links.
 * @param array $links
 *   The found links array.
 * @param array $missing
 *   The missing tags array.
 * @param string $docroot
 *   The Drupal file document root.
 * @param mixed $config
 *   The module configuration.
 */
function _responsive_favicons_process_dom_links(
  DOMDocument $dom,
  DOMNodeList $dom_links,
  array &$links,
  array &$missing,
  string $docroot,
  mixed $config,
) {
  $show_missing = $config->get('show_missing') ?? 0;
  /** @var DOMElement $link */
  foreach ($dom_links as $link) {
    if ($link->hasAttributes()) {
      $attributes = [];
      foreach ($link->attributes as $attr) {
        $attributes[$attr->nodeName] = $attr->nodeValue;
      }
      $path = _responsive_favicons_normalise_path($attributes['href'], $config);
      $attributes['href'] = $path;
      if (_responsive_favicons_file_exist($path, $docroot)) {
        $links[] = $attributes;
      }
      else {
        if ($show_missing) {
          $links[] = $attributes;
        }
        $missing[] = $dom->saveHTML($link);
      }
    }
  }
}

/**
 * Process favicon DOM metatags.
 *
 * @param DOMDocument $dom
 *   The DOM document.
 * @param DOMNodeList $dom_metatags
 *   The DOM metatags.
 * @param array $metatags
 *   The found metatags array.
 * @param array $missing
 *   The missing tags array.
 * @param string $docroot
 *   The Drupal file document root.
 * @param mixed $config
 *   The module configuration.
 */
function _responsive_favicons_process_dom_metatags(
  DOMDocument $dom,
  DOMNodeList $dom_metatags,
  array &$metatags,
  array &$missing,
  string $docroot,
  mixed $config,
) {
  $show_missing = $config->get('show_missing') ?? 0;
  /** @var DOMElement $meta */
  foreach ($dom_metatags as $meta) {
    if ($meta->hasAttributes()) {
      $attributes = [];
      foreach ($meta->attributes as $attr) {
        $attributes[$attr->nodeName] = $attr->nodeValue;
      }
      // We only validate the image file.
      if ($attributes['name'] === 'msapplication-TileImage') {
        $path = _responsive_favicons_normalise_path($attributes['content'], $config);
        $attributes['content'] = $path;
        if (_responsive_favicons_file_exist($path, $docroot)) {
          $metatags[] = $attributes;
        }
        else {
          if ($show_missing) {
            $metatags[] = $attributes;
          }
          $missing[] = $dom->saveHTML($meta);
        }
      }
      // Add any other meta-tags and assume they contain no images.
      else {
        $metatags[] = $attributes;
      }
    }
  }
}

/**
 * Determine if an icon path is valid.
 *
 * @param string $path
 *   The icon path.
 * @param string $docroot
 *   The Drupal document root.
 *
 * @return bool
 *   TRUE is the URL is valid, FALSE otherwise.
 */
function _responsive_favicons_file_exist(string $path, string $docroot): bool {
  if (UrlHelper::isExternal($path)) {
    // Check that the external resource is readable.
    $exists = fopen($path, 'r');
    return ($exists && @fread($exists, 1) !== FALSE);
  }
  else {
    // Remove any url parameters.
    $url_path = parse_url($path, PHP_URL_PATH);
    // Check that file exists.
    $file_path = $docroot . $url_path;
    return (file_exists($file_path) && is_readable($file_path));
  }
}

/**
 * Help to normalise the path to the icons.
 *
 * @param string $file_path
 *   The filename of the icon.
 * @param mixed|null $config
 *   The module configuration.
 *
 * @return string
 *   The full relative path to the icon within public files.
 */
function _responsive_favicons_normalise_path($file_path, $config = NULL) {
  // Use default config if not provided as parameter.
  if (is_null($config)) {
    $config = \Drupal::config('responsive_favicons.settings');
  }

  $file_url_generator = \Drupal::service('file_url_generator');

  // If local path.
  if (!UrlHelper::isExternal($file_path)) {
    // Convert backslashes when running on Windows.
    $file_path = str_replace('\\', '/', $file_path);

    if ($config->get('path_type') === 'upload') {
      $file_uri = 'public://' . $config->get('path') . $file_path;
      $file_path = $file_url_generator->generateString($file_uri);
    }
    else {
      $file_path = $config->get('path') . $file_path;
    }
  }

  // Try to convert the file path from absolute to relative.
  if (UrlHelper::isExternal($file_path)) {
    $file_path = $file_url_generator->transformRelative($file_path);
  }

  // Append browser cache refresh suffix.
  if ($config->get('cache_refresh_suffix')) {
    $query_string = \Drupal::service('asset.query_string')->get();
    if (!empty($query_string)) {
      $file_path .= (str_contains($file_path, '?') ? '&' : '?') . $query_string;
    }
  }

  // Allow other modules to alter the normalised icon $file_path.
  \Drupal::moduleHandler()->alter('responsive_favicons_icon_path', $file_path, $config);

  return $file_path;
}

/**
 * Check if a link with the specified attribute name and value exists.
 *
 * @param array $tags
 *   The array of "link" and "meta" tags.
 * @param string $attribute_name
 *   The link attribute name we are looking for.
 * @param string $attribute_value
 *   The link attribute value we are looking for.
 *
 * @return bool
 *   TRUE if a corresponding link has been found, FALSE otherwise.
 */
function _responsive_favicons_has_link(
  array $tags,
  string $attribute_name,
  string $attribute_value,
) {
  $links = $tags['links'];
  foreach ($links as $link_attributes) {
    foreach ($link_attributes as $name => $value) {
      if ($name === $attribute_name && $value === $attribute_value) {
        return TRUE;
      }
    }
  }
  return FALSE;
}
