<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

/**
 * @file
 * Contains hello_world.module.
 */

/**
 * Implements hook_theme().
 */
function hello_world_theme($existing, $type, $theme, $path)
{

  $messenger = \Drupal::messenger();

  // fetch the node titlle of id 1
  $node = Node::load(1);
  $node_title = $node->label();

  // update the title and save it to be displayed later in our twig
  $new_title = 'The New Updated Title';
  $node->set('title', $new_title);
  $save_result = $node->save();

  if ($save_result) {
    // ---- Update & Save Successful ----
    $messenger->addStatus(t('HOOK: Successfully updated title for Node ID @nid to "@new_title" and saved.', [
      '@nid' => $node->id(),
      '@new_title' => $new_title,
    ]));
  } else {
    // ---- Save Failed ---- (Less common if node loaded)
    $messenger->addError(t('HOOK: Failed to save Node ID @nid after updating title.', [
      '@nid' => $node->id(),
    ]));
    // Keep the default variable value.
  }

  // Assume $node is a valid loaded Node object from earlier code (e.g., Node::load(1))
  // Assume $messenger is available (\Drupal::messenger())

  $langcode = 'fr'; // Language code for French
  $node_fr = null; // Initialize the variable to null (important!)

  // Check if the node exists AND has the desired translation BEFORE getting it
  if ($node instanceof \Drupal\node\NodeInterface && $node->hasTranslation($langcode)) {
    // ---- SUCCESS: Translation Exists ----

    // Now it's safe to get the actual translation object
    $node_fr = $node->getTranslation($langcode);

    // Add success message (using the retrieved translation object)
    $messenger->addStatus(t('Successfully retrieved @langcode translation for Node @nid. Title: @title', [
      '@langcode' => $langcode,
      '@nid' => $node->id(), // Use the original node's ID
      '@title' => $node_fr->label(), // Use the French node object's title
    ]));

    // $node_fr now holds the French translation object

  } else {
    // ---- FAILURE: Translation Not Found (or Node was invalid) ----

    // Add a warning message. Check if $node exists before accessing its ID.
    if ($node instanceof \Drupal\node\NodeInterface) {
      $messenger->addWarning(t('Node @nid exists, but a translation for language "@langcode" was not found.', [
        '@nid' => $node->id(),
        '@langcode' => $langcode,
      ]));
    } else {
      // Handle case where the original $node object wasn't valid
      $messenger->addError(t('Cannot check for translation because the base node is not valid.'));
    }
    // $node_fr remains null in this 'else' block
  }

  // Start the array of theme hook definitions.
  $hooks = [];

  // --- ADD THE NEW THEME HOOK DEFINITION ---
  $hooks['hello_world_reference_info'] = [ // New unique theme hook name
    'variables' => [ // Define the variables it expects
      'selected_title' => NULL,
      'related_titles' => [],
    ],
    // Drupal will automatically look for hello-world-reference-info.html.twig
    // in the module's 'templates' directory because the key matches the pattern.
    // You could explicitly add: 'template' => 'hello-world-reference-info',
  ];
  // --- END OF NEW THEME HOOK DEFINITION ---
  // Return the complete array of theme hooks defined by this module.
  return [
    'hello_world' => [
      'variables' => [
        'name' => 'Bouujemaa', //
        'url' => '',
        'link' => '',
        'loaded_node_1_title' => $node_title,
        'node_fr' => $node_fr,
        'hooks' => $hooks,
      ],
      'template' => 'hello_world', // Specify the template name (without .html.twig).
    ],
  ];
}

function hello_world_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  // Target the user login form specifically.
  if ($form_id === 'user_login_form') {
    // Add a simple text field.
    $form['hello_world_extra_field'] = [
      '#type' => 'textfield',
      '#title' => t('Your Favorite Moroccan Dish?'), // Use t() for translation
      '#description' => t('Just adding an extra field for practice!'),
      '#weight' => 100, // Optional: control the field's position
    ];
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function hello_world_page_attachments_alter(array &$page)
{
  // Define the meta tag as a render array.
  $viewport_meta_tag = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'viewport',
      'content' => 'width=device-width, initial-scale=1, shrink-to-fit=no',
    ],
  ];

  // Add the meta tag to the 'html_head' attachments.
  // The key 'hello_world_viewport' is just a unique identifier.
  $page['#attached']['html_head'][] = [$viewport_meta_tag, 'hello_world_viewport'];
}

/**
 * Implements hook_preprocess_menu().
 */
function hello_world_preprocess_menu(&$variables)
{
  // Loop through each menu item in the 'items' array.
  foreach ($variables['items'] as &$item) {
    // Items usually have their attributes in $item['attributes'] or $item['link']['#options']['attributes']
    // Let's try adding to the main item attributes first.
    if (isset($item['attributes']) && $item['attributes'] instanceof \Drupal\Core\Template\Attribute) {
      $item['attributes']->addClass('my-custom-class');
    }
    // Sometimes the attributes are on the link element within the item.
    elseif (isset($item['link']['#options']['attributes']) && is_array($item['link']['#options']['attributes'])) {
      // Ensure the 'class' key exists and is an array
      if (!isset($item['link']['#options']['attributes']['class'])) {
        $item['link']['#options']['attributes']['class'] = [];
      }
      // Add the class if it's not already there
      if (!in_array('my-custom-class', $item['link']['#options']['attributes']['class'])) {
        $item['link']['#options']['attributes']['class'][] = 'my-custom-class';
      }
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function hello_world_preprocess_block(&$variables)
{
  // Check if this is the system branding block.
  if ($variables['plugin_id'] === 'system_branding_block') {
    // Check if the site_logo element exists in the content.
    if (isset($variables['content']['site_logo']) && is_array($variables['content']['site_logo'])) {
      // Change the URI of the site logo.
      $variables['content']['site_logo']['#uri'] = 'https://static.cdnlogo.com/logos/d/88/drupal-wordmark.svg';

      // Since we are providing an external URL, we might need to ensure it's treated as external.
      // Often Drupal handles this, but you could add:
      if (isset($variables['content']['site_logo']['#attributes'])) {
        $variables['content']['site_logo']['#attributes']['src'] = $variables['content']['site_logo']['#uri'];
      }
      // If the logo is rendered via theme('image'), changing #uri is usually enough.
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 *
 * This function is called before the page.html.twig template is rendered.
 * We can add or modify variables that will be available in that template.
 *
 * @param array $variables
 *   An associative array containing existing template variables, passed by reference.
 *   We will add our new variable to this array.
 */
