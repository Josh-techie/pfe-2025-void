<?php

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_entity_base_field_info_alter().
 *
 * This hook allows modules to alter the base field definitions of entities.
 * We're using it to add a constraint to the User entity's password field.
 *
 * @param \Drupal\Core\Field\BaseFieldDefinition[] $fields
 *   An array of base field definitions.  These are the fields that are
 *   defined for the entity type.  We can modify them or add new ones.
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 *   The entity type.  This tells us which entity type's fields we're
 *   working with (e.g., Node, User, Taxonomy Term).
 */
function password_policy_enforcer_entity_base_field_info_alter(array &$fields, EntityTypeInterface $entity_type)
{
  // Check if we're dealing with the User entity.
  if ($entity_type->id() === 'user') {
    // Make sure the 'pass' field exists.  This is the field that stores the
    // user's password.
    if (isset($fields['pass'])) {
      // Add the 'PasswordPolicy' constraint to the 'pass' field.
      // This tells Drupal to use the Password Policy module's validator
      // when the password is being set or updated.
      //
      // Assumption: The Password Policy module is installed and enabled.
      // Assumption: The Password Policy module provides a constraint named
      //             'PasswordPolicy'.
      $fields['pass']->addConstraint('PasswordPolicy');
    }
  }
}
