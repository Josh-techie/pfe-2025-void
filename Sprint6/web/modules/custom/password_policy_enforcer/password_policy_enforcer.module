<?php

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_entity_base_field_info_alter().
 *
 * @param \Drupal\Core\Field\BaseFieldDefinition[] $fields
 *   An array of base field definitions.
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 *   The entity type.
 */
function password_policy_enforcer_entity_base_field_info_alter(array &$fields, EntityTypeInterface $entity_type)
{
  // Only alter the user entity type.
  if ($entity_type->id() === 'user') {
    // Check if the password field exists.
    if (isset($fields['pass'])) {
      // Add the PasswordPolicyConstraint to the password field.
      // Drupal now uses PasswordPolicyConstraint not PasswordPolicy
      // from the Drupal11 version!
      $fields['pass']->addConstraint('Drupal\password_policy\Plugin\Validation\Constraint\PasswordPolicyConstraint');
    }
  }
}
/**
 * Implements hook_entity_base_field_info().
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 *   The entity type definition.
 *
 * @return \Drupal\Core\Field\BaseFieldDefinition[]
 *   An array of base field definitions.
 */
function password_policy_enforcer_entity_base_field_info(EntityTypeInterface $entity_type)
{
  $fields = [];

  if ($entity_type->id() === 'node') {
    $fields['my_custom_field'] = BaseFieldDefinition::create('string')
      ->setLabel(t('My Custom Field'))
      ->setDescription(t('A custom field added to nodes.'))
      ->setSettings([
        'max_length' => 255,
        'default_value' => '',
        'case_sensitive' => FALSE,
      ])
      ->setDisplayOptions('view', [
        'label' => 'above',
        'type' => 'string',
        'weight' => -4,
      ])
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => -4,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);
  }

  return $fields;
}

function password_policy_enforcer_update_10001()
{
  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(t('Custom field  2'))
    ->setSettings([
      'max_length' => 255,
      'default_value' => '',
      'case_sensitive' => FALSE,
    ])
    ->setDisplayOptions('view', [
      'label' => 'above',
      'type' => 'string',
      'weight' => -4,
    ])
    ->setDisplayOptions('form', [
      'type' => 'string_textfield',
      'weight' => -4,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('my_custom_field_2', 'node', 'password_policy_enforcer', $field_storage_definition);
}

/**
 * Implements hook_install().
 */
function password_policy_enforcer_install()
{
  // Example: Create a configuration setting on module install.
  $config = \Drupal::configFactory()->getEditable('password_policy_enforcer.settings');
  $config->set('default_policy', 'basic')->save();

  // Display a message.
  \Drupal::messenger()->addMessage(t('Message Frorm Hook: The Password Policy Enforcer module has been successfully installed!'));
}

/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 */
function password_policy_enforcer_node_presave(Drupal\Core\Entity\EntityInterface $entity)
{
  // Check if it's an article node and is new.
  if ($entity->bundle() == 'article' && $entity->isNew() && $entity instanceof \Drupal\node\NodeInterface) {
    // Get the current title.
    $title = $entity->getTitle();

    // Prefix the title with "HEY-".
    $entity->setTitle('HEY-' . $title);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update() for node entities.
 */
function password_policy_enforcer_node_update(Drupal\Core\Entity\EntityInterface $entity)
{
  // First, ensure that the entity is a Node and that it has the 'original' property.
  if ($entity instanceof \Drupal\node\NodeInterface && isset($entity->original)) {
    // Get the original title.  We need to check if it's a Node object first.
    $original_title = $entity->original->getTitle();

    // Get the current title.
    $current_title = $entity->getTitle();

    // Check if the title has changed.
    if ($original_title != $current_title) {
      // The title has been updated. Do something!
      \Drupal::logger('password_policy_enforcer')->notice('Node title changed from @old_title to @new_title.', [
        '@old_title' => $original_title,
        '@new_title' => $current_title,
      ]);
    }
  }
}

/**
 * Implements hook_theme().
 */
function password_policy_enforcer_theme($existing, $type, $theme, $path)
{
  return [
    'password_policy_custom_message' => [
      'variables' => [
        'message' => NULL, // Define the 'message' variable
        'policy_name' => NULL, // Define the 'policy_name' variable
      ],
      'template' => 'password-policy-custom-message', // The name of the template file (without .html.twig)
      'path' => $path . '/templates', // The path to the templates directory
    ],
  ];
}
