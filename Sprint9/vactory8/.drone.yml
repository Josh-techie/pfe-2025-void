name: default
kind: pipeline
type: docker

# trigger:
#   branch:
#   - develop

steps:
  - name: code-analysis
    image: kytay/sonar-node-plugin
    settings:
      sonar_host:
        from_secret: sonar_host
      sonar_token:
        from_secret: sonar_token
  - name: build
    image: docker/compose:1.29.2
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      branch:
        - develop
    environment:
      SECRET_OAUTH_PRIVATE_KEY:
        from_secret: OAUTH_PRIVATE_KEY
      SECRET_OAUTH_PUBLIC_KEY:
        from_secret: OAUTH_PUBLIC_KEY
      SECRET_DOCKER_DB_NAME:
        from_secret: DOCKER_DB_NAME
      SECRET_DOCKER_DB_USER:
        from_secret: DOCKER_DB_USER
      SECRET_DOCKER_DB_PASSWORD:
        from_secret: DOCKER_DB_PASSWORD
      SECRET_DOCKER_DB_PORT:
        from_secret: DOCKER_DB_PORT
      SECRET_DOCKER_DB_HOST:
        from_secret: DOCKER_DB_HOST
      SECRET_MEMCACHE_SERVER_ADDR:
        from_secret: MEMCACHE_SERVER_ADDR
      SECRET_MEMCACHE_SERVER_PORT:
        from_secret: MEMCACHE_SERVER_PORT
      SECRET_FRONTEND_CACHE_KEY:
        from_secret: FRONTEND_CACHE_KEY
      SECRET_GOOGLE_PLACES_API:
        from_secret: GOOGLE_PLACES_API
      SECRET_OPEN_CAGE_API:
        from_secret: OPEN_CAGE_API
      SECRET_KEYCLOAK_ISSUER:
        from_secret: KEYCLOAK_ISSUER
      SECRET_BASIC_AUTH:
        from_secret: BASIC_AUTH
      SECRET_NEXTJS_CACHE_SECRET:
        from_secret: NEXTJS_CACHE_SECRET
      SECRET_MYSQL_DATABASE:
        from_secret: MYSQL_DATABASE
      SECRET_MYSQL_USER:
        from_secret: MYSQL_USER
      SECRET_MYSQL_PASSWORD:
        from_secret: MYSQL_PASSWORD
      SECRET_PMA_HOSTS:
        from_secret: PMA_HOSTS
      SECRET_PMA_USER:
        from_secret: PMA_USER
      SECRET_PMA_PASSWORD:
        from_secret: PMA_PASSWORD
      SECRET_UPLOAD_LIMIT:
        from_secret: UPLOAD_LIMIT
      SECRET_MAX_EXECUTION_TIME:
        from_secret: MAX_EXECUTION_TIME
    commands:
      # - mkdir oauth-keys
      - echo "$SECRET_OAUTH_PRIVATE_KEY" > oauth-keys/private.key
      - echo "$SECRET_OAUTH_PUBLIC_KEY" > oauth-keys/public.key
      - echo "DOCKER_DB_NAME=$SECRET_DOCKER_DB_NAME" >> .env.prod
      - echo "DOCKER_DB_USER=$SECRET_DOCKER_DB_USER" >> .env.prod
      - echo "DOCKER_DB_PASSWORD=$SECRET_DOCKER_DB_PASSWORD" >> .env.prod
      - echo "DOCKER_DB_PORT=$SECRET_DOCKER_DB_PORT" >> .env.prod
      - echo "DOCKER_DB_HOST=$SECRET_DOCKER_DB_HOST" >> .env.prod
      - echo "MEMCACHE_SERVER_ADDR=$SECRET_MEMCACHE_SERVER_ADDR" >> .env.prod
      - echo "MEMCACHE_SERVER_PORT=$SECRET_MEMCACHE_SERVER_PORT" >> .env.prod
      - echo "FRONTEND_CACHE_KEY=$SECRET_FRONTEND_CACHE_KEY" >> .env.prod
      - echo "GOOGLE_PLACES_API=$SECRET_GOOGLE_PLACES_API" >> .env.prod
      - echo "OPEN_CAGE_API=$SECRET_OPEN_CAGE_API" >> .env.prod
      - echo "KEYCLOAK_ISSUER=$SECRET_KEYCLOAK_ISSUER" >> .env.prod
      - echo "BASIC_AUTH=$SECRET_BASIC_AUTH" >> .env.prod
      - echo "NEXTJS_CACHE_SECRET=$SECRET_NEXTJS_CACHE_SECRET" >> .env.prod
      - echo "MYSQL_DATABASE=$SECRET_MYSQL_DATABASE" >> .env.prod
      - echo "MYSQL_USER=$SECRET_MYSQL_USER" >> .env.prod
      - echo "MYSQL_PASSWORD=$SECRET_MYSQL_PASSWORD" >> .env.prod
      - echo "PMA_HOSTS=$SECRET_PMA_HOSTS" >> .env.prod
      - echo "PMA_USER=$SECRET_PMA_USER" >> .env.prod
      - echo "PMA_PASSWORD=$SECRET_PMA_PASSWORD" >> .env.prod
      - echo "UPLOAD_LIMIT=$SECRET_UPLOAD_LIMIT" >> .env.prod
      - echo "MAX_EXECUTION_TIME=$SECRET_MAX_EXECUTION_TIME" >> .env.prod
      - docker-compose --project-name vactory_drupal -f docker-compose.prod.yml --env-file=.env.prod build
  - name: publish
    image: docker/compose:1.29.2
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      # branch:
      #   - develop
      event:
        - promote
    depends_on:
      - build
    commands:
      # If new server installation comment the following backup line to succeed first deployment.
      - docker exec vactory_php drush sql-dump --gzip --result-file="/var/www/backup/db_dump_$(date +%d%m%Y_%H%M%S).sql"
      - docker exec vactory_php sh -c "ls -t /var/www/backup | tail -n +3 | xargs -I {} rm /var/www/backup/{}"
      - docker-compose --project-name vactory_drupal -f docker-compose.prod.yml stop php
      - docker-compose --project-name vactory_drupal -f docker-compose.prod.yml --env-file=.env.prod up -d php
      - sleep 10 # Give container some time to bootup
      - docker exec vactory_php drush cr
  - name: notify
    image: plugins/slack-blame
    depends_on:
      - publish
    settings:
      token: xoxb-165984507073-3573668741141-PUYGfsDIQQKo9JAPhMbLWkx4
      channel: test-drone-ci
      success_template: |
        {{#if ${DRONE_PULL_REQUEST} }}
          ✅ <https://bitbucket.org/{{ repo.owner }}/{{ repo.name }}/pull/${DRONE_PULL_REQUEST}|Pull Request #${DRONE_PULL_REQUEST}>
        {{else}}
          ✅ {{ uppercasefirst build.status }}: Build #{{ build.number }} (type: `{{ build.event }}`)
        {{/if}}
        Commit: <${CI_REPO_LINK}/commits/{{ build.commit }}|{{ truncate build.commit 8 }}>
        Branch: <${CI_REPO_LINK}/commits/${DRONE_SOURCE_BRANCH}|${DRONE_SOURCE_BRANCH}>
        Author: ${DRONE_COMMIT_AUTHOR}
        <${DRONE_BUILD_LINK}|Visit build page ↗>
      success_image_attachments:
        - "http://i.imgur.com/TP4PIxc.jpg"
      failure_template: |
        {{#if ${DRONE_PULL_REQUEST} }}
          ❌ <https://bitbucket.org/{{ repo.owner }}/{{ repo.name }}/pull/${DRONE_PULL_REQUEST}|Pull Request #${DRONE_PULL_REQUEST}>
        {{else}}
          ❌ {{ uppercasefirst build.status }}: Build #{{ build.number }} (type: `{{ build.event }}`)
        {{/if}}
        Commit: <${CI_REPO_LINK}/commits/{{ build.commit }}|{{ truncate build.commit 8 }}>
        Branch: <${CI_REPO_LINK}/commits/${DRONE_SOURCE_BRANCH}|${DRONE_SOURCE_BRANCH}>
        Author: ${DRONE_COMMIT_AUTHOR}
        <${DRONE_BUILD_LINK}|Visit build page ↗>
      failure_image_attachments:
        - "http://cdn.meme.am/instances/51000361.jpg"
    when:
      status: [success, failure]
      branch: [develop]
  # - name: slack_notify
  #   image: plugins/slack
  #   depends_on:
  #     - publish
  #   settings:
  #     webhook: token_webhook
  #     channel: vactory3
  #     template: >
  #       {{#success build.status}} ✔ {{ else }} :x: {{/success}} {{ uppercasefirst build.status }}: Build Drupal #{{ build.number }} * (type: `{{ build.event }}`)

  #       Commit: <https://bitbucket.org/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.commit }}|{{ truncate build.commit 8 }}>

  #       Branch: <https://bitbucket.org/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}>

  #       Build: <{{ build.link }}| Drone Build {{ build.number }} ↗>

  #       <https://backend.vactory.lecontenaire.com/en| Vactory>
  #   when:
  #     status: [success, failure]
  #     branch: [develop]
volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock
